plugins {
    id 'java-library'
    id 'jacoco'
    id 'io.spring.dependency-management' version "1.0.8.RELEASE"
    id 'signing'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:Cairo-SR8'
    }
}

project.version = '1.1.1-RELEASE'
sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    implementation 'io.micrometer:micrometer-core'
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework.boot:spring-boot-actuator'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'
}

task printCoverageResult() {
    dependsOn jacocoTestReport

    def reportFile = project.file("build/reports/jacoco/test/jacocoTestReport.xml")
    inputs.file(reportFile)

    doLast {
        def slurper = new XmlSlurper()
        slurper.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        slurper.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        def xml = slurper.parse(reportFile)
        def counter = xml.counter.find {
            node -> node.@type == 'LINE'
        }
        def missed = counter.@missed.toDouble()
        def covered = counter.@covered.toDouble()
        def total = missed + covered
        def percentage = covered / total * 100

        printf "Total %.0f%%%n", percentage
    }
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
    }
    finalizedBy printCoverageResult
}

test {
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
    finalizedBy jacocoTestReport
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = 'Spring Boot Actuator JMX Metrics Exporter'
                description = 'Library to export JMX MBean attributes as Spring Boot Actuator metrics'
                url = 'https://github.com/bjohannsen/spring-boot-actuator-jmx-metrics-exporter'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        name = 'Benedikt Johannsen'
                        email = 'mail@bjohannsen.net'
                    }
                }

                scm {
                    connection = 'scm:git:git@github.com:bjohannsen/spring-boot-actuator-jmx-metrics-exporter.git'
                    developerConnection = 'scm:git:ssh://github.com:bjohannsen/spring-boot-actuator-jmx-metrics-exporter.git'
                    url = 'https://github.com/bjohannsen/spring-boot-actuator-jmx-metrics-exporter'
                }
            }

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            groupId = 'net.bjohannsen'
            artifactId = 'spring-boot-actuator-jmx-metrics-exporter'

            from components.java
            artifact sourcesJar
            artifact javadocJar
        }

    }
    repositories {
        maven {
            if(project.version.endsWith('-RELEASE')) {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            } else {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            }
            credentials {
                username = System.getenv('PUBLISH_REPO_USER')
                password = System.getenv('PUBLISH_REPO_PW')
            }
        }
    }
}

ext."signing.gnupg.keyName" = System.getenv('SIGNING_GPG_KEY_ID');
ext."signing.gnupg.executable" = "gpg";
ext."signing.gnupg.passphrase" = System.getenv('SIGNING_GPG_PASSPHRASE')

signing {
    useGpgCmd()
    sign publishing.publications.maven
}
