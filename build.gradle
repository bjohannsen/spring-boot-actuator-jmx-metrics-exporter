plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'io.spring.dependency-management' version "1.0.8.RELEASE"
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:Cairo-SR8'
    }
}

dependencies {
    implementation 'io.micrometer:micrometer-core'
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework.boot:spring-boot-actuator'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'
}

task printCoverageResult() {
    dependsOn jacocoTestReport

    def reportFile = project.file("build/reports/jacoco/test/jacocoTestReport.xml")
    inputs.file(reportFile)

    doLast {
        def slurper = new XmlSlurper()
        slurper.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        slurper.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        def xml = slurper.parse(reportFile)
        def counter = xml.counter.find {
            node -> node.@type == 'LINE'
        }
        def missed = counter.@missed.toDouble()
        def covered = counter.@covered.toDouble()
        def total = missed + covered
        def percentage = covered / total * 100

        printf "Total %.0f%%%n", percentage
    }
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
    }
    finalizedBy printCoverageResult
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
    finalizedBy jacocoTestReport
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = 'Spring Boot Actuator JMX Metrics Exporter'
                description = 'Library to export JMX MBean attribute as Spring Boot Actuator metrics'
                url = 'https://github.com/bjohannsen/spring-boot-actuator-jmx-metrics-exporter'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'bjohannsen'
                        name = 'Benedikt Johannsen'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:bjohannsen/spring-boot-actuator-jmx-metrics-exporter.git'
                    url = 'https://github.com/bjohannsen/spring-boot-actuator-jmx-metrics-exporter'
                }
            }

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            groupId = 'net.bjohannsen'
            artifactId = 'spring-boot-actuator-jmx-metrics-exporter'
            version = '0.1.0'

            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}